variables:
  PRIVATE_DOCKER_REGISTRY: eyrie.comsys.rwth-aachen.de
  PUBLIC_DOCKER_REGISTRY: kleenet.comsys.rwth-aachen.de
  IMAGE_NAME: $PRIVATE_DOCKER_REGISTRY/$CI_PROJECT_PATH_SLUG
  CI_IMAGE_NAME: $PUBLIC_DOCKER_REGISTRY/$CI_PROJECT_PATH_SLUG
  PIPENV_CACHE_DIR: /cache/pipenv

before_script:
  - echo $CI_JOB_ID
  - echo $CI_RUNNER_ID
  - echo $CI_RUNNER_REVISION
  - echo $CI_RUNNER_TAGS
  - echo $CI_RUNNER_VERSION
  - echo $CI_RUNNER_DESCRIPTION
  - echo "$CI_PROJECT_NAME"
  - echo "$CI_PROJECT_NAMESPACE"
  - echo "$CI_PROJECT_PATH"
  - echo "$CI_PROJECT_PATH_SLUG"
  - echo "$CI_COMMIT_REF_NAME"
  - echo "$CI_COMMIT_REF_SLUG"
  - echo "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
  - echo "$CI_MERGE_REQUEST_TITLE"
  - | # derive and print WS_JOBS
      export WS_JOBS=${CI_RUNNER_DESCRIPTION##*-j} # strip the longest match of *-j from the front of the description
      if [[ "$WS_JOBS" = "$CI_RUNNER_DESCRIPTION" ]] ; then # check if no match happened
        WS_JOBS=0
      else
        case "${WS_JOBS}" in
          ''|*[!0-9]*) WS_JOBS=0 ;; # check if remaining value is not a number
        esac
      fi
      echo "WS_JOBS=${WS_JOBS}"

stages:
  - build
  - test

lint:
  stage: build
  image: kennethreitz/pipenv
  variables:
    PIPENV_CACHE_DIR: /cache/pipenv
  script:
    - ws-src/mypy_check.sh
    - ws-src/pylint_check.sh
    - ws-src/yapf_check.sh || (echo && echo Code not properly formatted - run ws-src/yapf_format.sh! && false)

editorconfig:
  stage: build
  image: mstruebing/editorconfig-checker
  artifacts:
    when: always
    paths:
      - paths.log
    expire_in: 1 day
  script:
    - '/ec -spaces-after-tabs -e "\\.py$" -dry-run >paths.log'
    - '/ec -spaces-after-tabs -e "\\.py$"'

build-not-master:
  stage: build
  image: docker:dind
  except:
    refs:
      - master
  script:
    - 'source .gitlab-ci-src/setup_dind.sh'
    - '.gitlab-ci-src/create_base_image.sh'
    - 'EXPIRY=$(date -d@"$(( $(date -u +%s)+60*60*24 ))" +%Y-%m-%dT%H:%M:%SZ)' # compute date of tomorrow with the alpine busybox date command
    - 'docker build --build-arg EXPIRY_DATE=$EXPIRY --build-arg SRC_IMAGE=base -f .gitlab-ci-src/expiring.Dockerfile -t $IMAGE_NAME:$CI_COMMIT_SHA .'

    - |
        ( # subshell to enable waiting on parallel processes
          ( echo $IMAGE_NAME:ci $IMAGE_NAME:$CI_COMMIT_SHA | xargs -n 1 docker push ) &
          docker save $IMAGE_NAME:ci | zstd -T${WS_JOBS:-0} -2 >/cache/image.tar.zst
          echo "Saved new copy of $IMAGE_NAME to cache"
          wait
        )
    - 'echo "Successfully pushed $IMAGE_NAME:$CI_COMMIT_SHA (expires at $EXPIRY)"'

build-master:
  stage: build
  image: docker:dind
  artifacts:
    when: always
    paths:
      - build.log
    expire_in: 1 day
  only:
    refs:
      - master
  script:
    - 'source .gitlab-ci-src/setup_dind.sh'
    - '.gitlab-ci-src/create_base_image.sh'
    - 'docker tag base $IMAGE_NAME:latest'
    - 'EXPIRY=$(date -d@"$(( $(date -u +%s)+60*60*24 ))" +%Y-%m-%dT%H:%M:%SZ)' # compute date of tomorrow with the alpine busybox date command
    - 'docker build --build-arg EXPIRY_DATE=$EXPIRY --build-arg SRC_IMAGE=base -f .gitlab-ci-src/expiring.Dockerfile -t $IMAGE_NAME:$CI_COMMIT_SHA .'

    - |
        ( # subshell to enable waiting on parallel processes
          ( echo $IMAGE_NAME:ci $IMAGE_NAME:$CI_COMMIT_SHA | xargs -n 1 docker push ) &
          docker save $IMAGE_NAME:ci | zstd -T${WS_JOBS:-0} -2 >/cache/image.tar.zst
          echo "Saved new copy of $IMAGE_NAME to cache"
          wait
        )
    - 'echo "Successfully pushed $IMAGE_NAME:$CI_COMMIT_SHA (expires at $EXPIRY)"'

    - 'docker run --name ci -v /ccache:/ccache $IMAGE_NAME:latest build -j ${WS_JOBS} >build.log 2>&1'
    - 'docker commit --change "CMD [\"shell\", \"-s\", \"fish\"]" ci $IMAGE_NAME:latest-prebuilt'
    - echo $IMAGE_NAME:latest $IMAGE_NAME:latest-prebuilt | xargs -n 1 docker push

test-build-debug:
  stage: test
  image: $CI_IMAGE_NAME:$CI_COMMIT_SHA
  artifacts:
    when: always
    paths:
      - build.log
    expire_in: 1 day
  script:
    - 'cd /workspace'
    - './ws build debug >build.log 2>&1'
  after_script:
    - 'mv /workspace/build.log build.log'

test-build-profile:
  stage: test
  image: $CI_IMAGE_NAME:$CI_COMMIT_SHA
  artifacts:
    when: always
    paths:
      - build.log
    expire_in: 1 day
  script:
    - 'cd /workspace'
    - './ws build profile >build.log 2>&1'
  after_script:
    - 'mv /workspace/build.log build.log'

test-build-release:
  stage: test
  image: $CI_IMAGE_NAME:$CI_COMMIT_SHA
  artifacts:
    when: always
    paths:
      - build.log
      - build-release.log
    expire_in: 1 day
  script:
    - 'cd /workspace'
    - './ws build >build.log 2>&1'
    - 'timeout 10s ./ws build release >build-release.log 2>&1' # the previous command should already have built release
  after_script:
    - 'mv /workspace/build.log build.log'
    - 'mv /workspace/build-release.log build-release.log'

test-build-sanitized:
  stage: test
  image: $CI_IMAGE_NAME:$CI_COMMIT_SHA
  artifacts:
    when: always
    paths:
      - build.log
    expire_in: 1 day
  script:
    - 'cd /workspace'
    - './ws build sanitized >build.log 2>&1'
  after_script:
    - 'mv /workspace/build.log build.log'

test-build-dir:
  stage: test
  image: $CI_IMAGE_NAME:$CI_COMMIT_SHA
  script:
    - 'cd /workspace'
    - './ws build-dir llvm'
    - '! ./ws build-dir'
    - '! ./ws build-dir lllvm'

test-clean:
  stage: test
  image: $CI_IMAGE_NAME:$CI_COMMIT_SHA
  script:
    - 'cd /workspace'
    - 'mkdir .build .bin'
    - './ws clean'
    - '[[ -e ws-settings.toml ]]'
    - '[[ ! -e .bin ]]'
    - '[[ ! -e .build ]]'

test-list-options:
  stage: test
  image: $CI_IMAGE_NAME:$CI_COMMIT_SHA
  script:
    - 'cd /workspace'
    - './ws list-options LLVM Z3'
    - '! ./ws list-options Z4'
    - './ws list-options'

test-reset-settings:
  stage: test
  image: $CI_IMAGE_NAME:$CI_COMMIT_SHA
  script:
    - 'cd /workspace'
    - 'cp ws-settings.toml ws-settings.bak'
    - './ws reset-settings'
    - '! cmp --silent ws-settings.toml ws-settings.bak'

test-run:
  stage: test
  image: $CI_IMAGE_NAME:$CI_COMMIT_SHA
  script:
    - 'cd /workspace'
    - './ws run -h'
    - './ws run --help'
    - './ws run echo'
    - './ws run -- echo'
    - './ws run profile echo'
    - './ws run profile -- echo'
    - '! ./ws run false'

test-dist-clean-and-setup:
  stage: test
  image: $CI_IMAGE_NAME:$CI_COMMIT_SHA
  script:
    - 'cd /workspace'
    - 'echo y | ./ws dist-clean -p'
    - '[[ -e ws-settings.toml ]]'
    - '[[ ! -e .bin ]]'
    - '[[ ! -e .build ]]'
    - '[[ ! -e .venv ]]'
    - '[[ ! -e llvm ]]'
    - '[[ ! -e z3 ]]'
    - '[[ ! -e minisat ]]'
    - '[[ ! -e stp ]]'
    - '[[ ! -e klee-uclibc ]]'
    - '[[ ! -e klee ]]'

    - './ws setup --until llvm'
    - '[[ -e llvm ]]'
    - '[[ ! -e klee ]]'

    - './ws setup'
    - '[[ -e klee ]]'

    - 'touch foo'
    - 'echo y | ./ws dist-clean'
    - '[[ ! -e ws-settings.toml ]]'
    - '[[ ! -e .venv ]]'
    - '[[ ! -e llvm ]]'
    - '[[ ! -e klee ]]'
    - '[[ ! -e foo ]]'

test-shell:
  stage: test
  image: $CI_IMAGE_NAME:$CI_COMMIT_SHA
  script:
    - 'cd /workspace'
    - 'echo | ./ws shell -s bash'
    - 'echo | ./ws shell -s fish'
    - 'echo | ./ws shell -s zsh'
