variables:
  PRIVATE_DOCKER_REGISTRY: registry-push.comsys.rwth-aachen.de
  PUBLIC_DOCKER_REGISTRY: registry.comsys.rwth-aachen.de
  IMAGE_NAME: $PRIVATE_DOCKER_REGISTRY/$CI_PROJECT_PATH_SLUG
  CI_IMAGE_NAME: $PUBLIC_DOCKER_REGISTRY/$CI_PROJECT_PATH_SLUG
  PIPENV_CACHE_DIR: /cache/pipenv

before_script:
  - | # setup netrc for usage in container
      echo -e "machine laboratory.comsys.rwth-aachen.de\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" >> ~/.netrc
      chmod 0600 ~/.netrc
  - | # derive and print WS_JOBS
      export WS_JOBS=${CI_RUNNER_DESCRIPTION##*-j} # strip the longest match of *-j from the front of the description
      if [[ "$WS_JOBS" = "$CI_RUNNER_DESCRIPTION" ]] ; then # check if no match happened
        WS_JOBS=0
      else
        case "${WS_JOBS}" in
          ''|*[!0-9]*) WS_JOBS=0 ;; # check if remaining value is not a number
        esac
      fi
      echo "WS_JOBS=${WS_JOBS}"

stages:
  - build
  - test

lint:
  stage: build
  image: kennethreitz/pipenv
  variables:
    PIPENV_CACHE_DIR: /cache/pipenv
  script:
    - ws-src/check.sh

editorconfig:
  stage: build
  image: mstruebing/editorconfig-checker
  artifacts:
    when: always
    paths:
      - paths.log
    expire_in: 1 day
  script:
    - '/ec -exclude "\\.py$" -dry-run >paths.log'
    - '/ec -exclude "\\.py$"'

build:
  stage: build
  image: docker:dind
  artifacts:
    when: always
    paths:
      - build.log
    expire_in: 1 day
  script:
    - 'source .gitlab-ci-src/setup_dind.sh'
    - '.gitlab-ci-src/create_base_image.sh'
      # compute date of tomorrow (+60*60*24 seconds) with the alpine busybox date command
    - 'EXPIRY=$(date -d@"$(( $(date -u +%s)+60*60*24 ))" +%Y-%m-%dT%H:%M:%SZ)'
    - 'docker build --build-arg EXPIRY_DATE=$EXPIRY --build-arg SRC_IMAGE=base -f .gitlab-ci-src/expiring.Dockerfile -t $IMAGE_NAME:$CI_COMMIT_SHA .'

    - | # push CI images while potentially (only on master) building new release images
        ( # subshell to enable waiting on parallel processes
          (
            echo $IMAGE_NAME:ci $IMAGE_NAME:$CI_COMMIT_SHA | xargs -n 1 docker push
            echo "Successfully pushed $IMAGE_NAME:ci $IMAGE_NAME:$CI_COMMIT_SHA (expires at $EXPIRY)"
          ) &
          (
            docker save $IMAGE_NAME:ci | zstd -T${WS_JOBS:-0} -2 >/cache/image.tar.zst
            echo "Saved new copy of $IMAGE_NAME to cache"
          ) &
          truncate -s 0 build.log # ensure CI succeeds when no build takes place, making sure that no possible remnants of old logs remain
          if [[ "$CI_COMMIT_REF_NAME" = "master" ]] ; then
            docker tag base $IMAGE_NAME:latest
            docker run --name ci \
              -v ~/.netrc:/root/.netrc \
              -v /ccache:/ccache \
              $IMAGE_NAME:latest build -j ${WS_JOBS} >build.log 2>&1
            docker commit \
              --change "CMD [\"shell\", \"-s\", \"fish\"]" \
              ci $IMAGE_NAME:latest-prebuilt
          fi
          wait
        )
    - |
      if [[ "$CI_COMMIT_REF_NAME" = "master" ]] ; then
        echo $IMAGE_NAME:latest $IMAGE_NAME:latest-prebuilt | xargs -n 1 docker push
      fi

.workspace:
  stage: test
  needs: [build]
  image: $CI_IMAGE_NAME:$CI_COMMIT_SHA

test-build-debug:
  extends: .workspace
  artifacts:
    when: always
    paths:
      - build.log
    expire_in: 1 day
  script:
    - 'cd /workspace'
    - './ws build debug >build.log 2>&1'
  after_script:
    - 'mv /workspace/build.log build.log'

test-build-profile:
  extends: .workspace
  artifacts:
    when: always
    paths:
      - build.log
    expire_in: 1 day
  script:
    - 'cd /workspace'
    - './ws build profile >build.log 2>&1'
  after_script:
    - 'mv /workspace/build.log build.log'

test-build-release:
  extends: .workspace
  artifacts:
    when: always
    paths:
      - build.log
      - build-release.log
    expire_in: 1 day
  script:
    - 'cd /workspace'
    - './ws build >build.log 2>&1'
    - 'timeout 10s ./ws build release >build-release.log 2>&1' # the previous command should already have built release
  after_script:
    - 'mv /workspace/build.log build.log'
    - 'mv /workspace/build-release.log build-release.log'

test-build-sanitized:
  extends: .workspace
  artifacts:
    when: always
    paths:
      - build.log
    expire_in: 1 day
  script:
    - 'cd /workspace'
    - './ws build sanitized >build.log 2>&1'
  after_script:
    - 'mv /workspace/build.log build.log'

test-clean:
  extends: .workspace
  script:
    - 'cd /workspace'
    - 'mkdir -p .build .bin'
    - './ws clean'
    - '[[ -e ws-settings.toml ]]'
    - '[[ ! -e .bin ]]'
    - '[[ ! -e .build ]]'

test-dist-clean-setup-reset-settings:
  extends: .workspace
  script:
    - 'cd /workspace'

    # dist-clean -p
    - 'mkdir -p .build .bin'
    - 'echo y | ./ws dist-clean -p'
    - '[[ -e ws-settings.toml ]]'
    - '[[ ! -e .bin ]]'
    - '[[ ! -e .build ]]'
    - '[[ ! -e .venv ]]'
    - '[[ ! -e llvm ]]'
    - '[[ ! -e z3 ]]'
    - '[[ ! -e minisat ]]'
    - '[[ ! -e stp ]]'
    - '[[ ! -e klee-uclibc ]]'
    - '[[ ! -e porse ]]'

    # setup -u
    - './ws setup --until z3'
    - '[[ -e z3 ]]'
    - '[[ ! -e porse ]]'

    # setup
    - './ws setup'
    - '[[ -e porse ]]'

    # reset-settings
    - 'cp ws-settings.toml ws-settings.bak'
    - './ws reset-settings'
    - '! cmp --silent ws-settings.toml ws-settings.bak'

    # dist-clean
    - 'touch foo'
    - 'echo y | ./ws dist-clean'
    - '[[ ! -e ws-settings.toml ]]'
    - '[[ ! -e .venv ]]'
    - '[[ ! -e llvm ]]'
    - '[[ ! -e porse ]]'
    - '[[ ! -e foo ]]'

test-shell:
  extends: .workspace
  script:
    - 'cd /workspace'
    - 'mkdir -p $(./ws build-dir llvm)'
    - 'echo cd-build-dir llvm >good.tmp'
    - 'echo cd-build-dir lllvm >bad.tmp'

    - 'echo | ./ws shell -s bash'
    - 'echo | ./ws shell -s fish'
    - 'echo | ./ws shell -s zsh'

    - '<good.tmp ./ws shell -s bash'
    - '<good.tmp ./ws shell -s fish'
    - '<good.tmp ./ws shell -s zsh'

    - '! <bad.tmp ./ws shell -s bash'
    - '! <bad.tmp ./ws shell -s fish'
    - '! <bad.tmp ./ws shell -s zsh'

test-pure:
  extends: .workspace
  script:
    - 'cd /workspace'

    # nop
    - './ws _ws_nop'

    # run
    - './ws run -h'
    - './ws run --help'
    - './ws run echo'
    - './ws run -- echo'
    - './ws run profile echo'
    - './ws run profile -- echo'
    - '! ./ws run false'

    # list-options
    - './ws list-options LLVM Z3'
    - '! ./ws list-options Z4'
    - './ws list-options'

    # build-dir
    - './ws build-dir llvm'
    - '! ./ws build-dir'
    - '! ./ws build-dir lllvm'
